/*
 * Copyright 2013-2014 SmartBear Software
 * Copyright 2014-2015 The TestFX Contributors
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the
 * European Commission - subsequent versions of the EUPL (the "Licence"); You may
 * not use this work except in compliance with the Licence.
 *
 * You may obtain a copy of the Licence at:
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the Licence for the
 * specific language governing permissions and limitations under the Licence.
 */
ext.pomDescription = 'TestFX Core'
ext.moduleName = 'org.testfx'
ext.openjfxVersion = '11'

repositories {
    jcenter()
}

static def getOSName() {
    final String osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains("linux")) {
        return ("linux")
    } else if (osName.contains("mac os x") || osName.contains("darwin") || osName.contains("osx")) {
        return ("mac")
    } else if (osName.contains("windows")) {
        return ("win")
    }
    return ""
}

ext.platform = getOSName()

dependencies {
    if (JavaVersion.current().isJava10Compatible()) {
        // In case we are on an Oracle JDK with JavaFX builtin, these will be ignored.
        compile "org.openjfx:javafx-base:${openjfxVersion}:${platform}"
        compile "org.openjfx:javafx-controls:${openjfxVersion}:${platform}"
        compile "org.openjfx:javafx-graphics:${openjfxVersion}:${platform}"
        compile "org.openjfx:javafx-swing:${openjfxVersion}:${platform}"
        compile "org.openjfx:javafx-fxml:${openjfxVersion}:${platform}"
    }

    compile 'org.hamcrest:hamcrest-core:1.3'
    testCompile 'org.hamcrest:hamcrest-core:1.3'
    compile "org.assertj:assertj-core:3.13.2"
    testCompile "org.assertj:assertj-core:3.13.2"
    compileOnly 'org.osgi:org.osgi.core:6.0.0'
    testCompile "junit:junit:4.13-beta-3"
    testCompile "org.mockito:mockito-core:3.0.0"
    testCompile project(":testfx-junit")
    if (JavaVersion.current().isJava11Compatible()) {
        // FIXME(mike): Really we should be checking if OpenJFX version is > 11.
        testCompile "org.testfx:openjfx-monocle:jdk-11+26"
    } else if (JavaVersion.current().isJava10Compatible() &&
            System.getProperty("java.vm.name").toLowerCase().contains("openjdk")) {
        testCompile "org.testfx:openjfx-monocle:jdk-11+26"
    } else if (JavaVersion.current().isJava9Compatible()) {
        testCompile "org.testfx:openjfx-monocle:jdk-9+181"
    } else {
        testCompile "org.testfx:openjfx-monocle:8u76-b04"
    }
}

sourceSets {
    if (!JavaVersion.current().isJava9Compatible()) {
        main {
            java {
                exclude '**/module-info.java'
            }
        }
    }
}

compileJava {
    if (JavaVersion.current().isJava9Compatible()) {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'javafx.base',
                    '--add-modules', 'javafx.controls',
                    '--add-modules', 'javafx.graphics',
                    '--add-modules', 'javafx.swing',
                    '--add-modules', 'javafx.fxml',
                    "--add-exports", "javafx.graphics/com.sun.glass.ui=$moduleName",
                    "--add-exports", "javafx.graphics/com.sun.javafx.application=$moduleName",
            ]
            classpath = files()
        }

        javadoc {
            afterEvaluate {
                exclude "**/module-info.java"
                options.addStringOption('-module-path', classpath.asPath)
                options.addMultilineStringsOption('-add-exports').setValue([
                        'javafx.graphics/com.sun.javafx.application=org.testfx',
                        'javafx.graphics/com.sun.glass.ui=org.testfx'])
            }
        }
    }
}

compileTestJava {
    if (JavaVersion.current().isJava9Compatible()) {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath,
                    '--add-modules', 'javafx.fxml',
                    '--add-modules', 'junit',
                    '--add-modules', 'org.testfx.junit',
                    '--add-reads', "$moduleName=javafx.fxml",
                    '--add-reads', "$moduleName=junit",
                    '--add-reads', "$moduleName=org.testfx.junit",
                    "--add-exports", "javafx.graphics/com.sun.glass.ui=$moduleName",
                    "--add-exports", "javafx.graphics/com.sun.javafx.application=$moduleName",
                    '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
            ]
            classpath = files()
        }
    }
}

jar {
    inputs.property("moduleName", moduleName)

    manifest {
        attributes('Automatic-Module-Name': moduleName)
        instruction 'Export-Package', '*'
        instruction 'Bundle-Activator', 'org.testfx.osgi.Activator'
        instruction 'Require-Capability', 'org.testfx.osgi.versionadapter'
    }
}
