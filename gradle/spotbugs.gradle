/*
 * Copyright 2013-2014 SmartBear Software
 * Copyright 2014-2015 The TestFX Contributors
 *
 * Licensed under the EUPL, Version 1.1 or - as soon they will be approved by the
 * European Commission - subsequent versions of the EUPL (the "Licence"); You may
 * not use this work except in compliance with the Licence.
 *
 * You may obtain a copy of the Licence at:
 * http://ec.europa.eu/idabc/eupl
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the Licence is distributed on an "AS IS" basis, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the Licence for the
 * specific language governing permissions and limitations under the Licence.
 */

// SpotBugs SpotBugs is the spiritual successor of FindBugs (a defect detection tool for Java that uses static
// analysis to look for more than 200 bug patterns, such as null pointer dereferences, infinite recursive loops,
// bad uses of the Java libraries and deadlocks).
// https://spotbugs.github.io/
apply plugin: "com.github.spotbugs"

spotbugs {
    toolVersion = "3.1.0"
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
    reportLevel = "high"
}

spotbugsMain {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

spotbugsTest {
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

task checkSpotBugsReport << {
    def xmlReport = spotbugsMain.reports.xml
    if (!xmlReport.destination.exists()) return
    def parser = new XmlSlurper()
    parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
    parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
    def slurped = parser.parse(xmlReport.destination)
    def report = ""
    slurped['BugInstance'].eachWithIndex { bug, index ->
        report += "${index + 1}. Found priority ${bug.@'priority'} bug: ${bug.@'type'} of category: ${bug.@'category'} "
        report += "in the following places:"
        bug['SourceLine'].each { place ->
            if (place.start == place.end) {
                report += "\n       ${place.@'classname'} at line: ${place.@'start'}"
            } else {
                // multi-line
                report += "\n       ${place.@'classname'} starting at line: ${place.@'start'} to line: ${place.@'end'}"
            }
        }
    }
    if (report.length() > 1) {
        logger.error "[SPOTBUGS]\n ${report}"
    }
}

if (System.env.CI == "true") {
    spotbugsMain.finalizedBy checkSpotBugsReport
}
